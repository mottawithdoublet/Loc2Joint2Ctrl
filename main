import maya.cmds as cmds
import maya.mel as mel
#import comet.cmds as ccmds
sel=cmds.ls (sl=True)
lsel=len(sel)
cmds.sets(em=True, n="CTRset")
cmds.sets(em=True, n="GRPset")
cmds.sets(em=True, n="GRPJNTset")
cmds.sets(em=True, n="JNTset")
cmds.sets(em=True, n="CNSTset")
cmds.sets(em=True, n="FIXset")
size=0
#lastjoint=null
 
#print sel, lsel
mel.eval('source "cometMenu.mel"')
for cont in sel:
    #selects joint
    jointLoop = cmds.ls(cont)
    joint_name = jointLoop[0][:-3]
    #joint2Locator
    #grp = cmds.group(name=(CTR[0]+'Grp'))
    #gets location of locator and creates a joint on it
    TRA = cmds.xform(cont,ws=True, q=True, t=True)
    ROT = cmds.xform(cont,ws=True, q=True, ro=True)
    if joint_name.find("HELPER") != -1:
        print "Helper"
        cmds.select(clear=True)
        GPjoint = cmds.group (em=True, name=(jointLoop[0]+'_Grp'))
        cmds.sets (GPjoint, fe="JNTset")
        cmds.select(clear=True)
        cmds.sets (GPjoint, fe="GRPJNTset")
        cmds.select(clear=True)
    else:
        print "Joint"
        cmds.select(clear=True)
        joint2Locator = cmds.joint(n=cont+"_Jnt", p=TRA, o=ROT, ch=False)
        cmds.sets (joint2Locator, fe="JNTset")
        cmds.select(clear=True)
        
    listJoints = cmds.listConnections('JNTset')
    size=(len(listJoints))
    if size == 1:
        print size
    else:
        lastJoint= listJoints[size-2]
        currentJoint = listJoints[size-1]
        #mel.eval('source "cometJointOrient.mel"')
        cmds.parent(lastJoint, currentJoint)
        #joint2Locator=cmds.joint(joint2Locator, e=True, oj="xyz", sao="yup")
        #orientCons=cmds.orientConstraint(lastJoint, currentJoint, mo=True)
        #cmds.delete(constraint)
		#ccmds.cometJointOrient()
#sel=cmds.select ('JNTset', hi=True)

    #creates control, group (normal, driven)
    CTR = cmds.circle (n=cont+"_Ctrl", ch=False, nr=(1,0,0), r=4)
    DRV = cmds.group (n=CTR[0]+"Drv") 
    GP = cmds.group (n=DRV+"Grp") 
    color=0
    joint_name= jointLoop[0][:-3]
    if joint_name.find("left") != -1:
        color=6
    elif joint_name.find("right") != -1:
        color=4
    else:
        color=17
    cmds.setAttr (CTR[0]+"Shape.overrideEnabled",1)
    cmds.setAttr (CTR[0]+"Shape.overrideColor",6)
    
    #creates selection for controls and group
    cmds.sets (CTR, fe="CTRset")
    cmds.sets (GP, fe="GRPset")
    
    #contraints control and joint
    constraint = cmds.parentConstraint(jointLoop[0],GP, mo=False)
    cmds.delete(constraint)
    listJointParent = cmds.listConnections('JNTset')
    size=(len(listJointParent))
    lastJointGroup = listJointParent[size-2]
    if size == 1:
        print size
    else:
        CONSTR= cmds.parentConstraint(CTR[0],lastJointGroup,mo=False)
        cmds.select(CTR[0])
        cmds.sets(CONSTR, fe="CNSTset")
        
    #parent controls
    listGroup = cmds.listConnections('GRPset')
    listControl = cmds.listConnections('CTRset')
    size=(len(listGroup))
    size2=(len(listControl))
    if size == 1:
        print size
    else:
        cmds.select(clear=True)
        lastGroup= listGroup[size-2]
        currentControl = listControl[size2-1]
        cmds.parent(lastGroup, currentControl)


listConstraints = cmds.listConnections('CNSTset')  
for cont in listConstraints:
    cmds.delete(cont)
    
listJointParent = cmds.listConnections('JNTset')
listControl= cmds.listConnections('CTRset')
size=(len(listJointParent))
counter=0
for cont in listJointParent:
    selectedJoint = listJointParent[counter]
    selectedControl = listControl[counter]
    FIX= cmds.parentConstraint(selectedControl,selectedJoint)
    cmds.sets(FIX, fe="FIXset")
    counter+=1

listFixConstraints = cmds.listConnections('FIXset')  
for cont in listFixConstraints:
    cmds.delete(cont)  

#cmds.ls("JNTset")   
#mel.eval('source "cometJointOrient.mel"')    
#mel.eval(cometJointOrient())
     
#cmds.delete("CNSTset")
    #cleans and reboots selection 
    
cmds.select ("GRPset")
cmds.ls(sl=True)
cmds.sets(rm="GRPset")
cmds.select ("GRPJNTset")
cmds.ls(sl=True)
cmds.sets(rm="GRPJNTset")
cmds.delete("GRPset","GRPJNTset")
cmds.select (cl=True)
